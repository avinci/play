vars:
  region: us-west-2
  sourceName: avinci/node_app
  integration: avinci_dh

login_image_registry_temp: &login_image_registry
  - |
      # login to docker hub
      IMAGE_NAME=$(shipctl get_resource_version_key "$image_res" "sourceName")
      DH_USR_NAME=$(shipctl get_integration_resource_field "$image_res" "userName")
      DH_PASS=$(shipctl get_integration_resource_field "$image_res" "password")
      DH_URL=$(shipctl get_integration_resource_field "$image_res" "url")
      docker login -u $DH_USR_NAME -p $DH_PASS

resources:
  - name: some_state
    type: state

  - name: in_repo
    type: gitRepo
    integration: demo_gh
    versionTemplate:
      sourceName: avinci/beta

  - name: play_repo
    type: gitRepo
    integration: demo_gh
    versionTemplate:
      sourceName: avinci/play

  - name: foo_int
    type: integration
    integration: foo

  - name: temp_img
    type: image
    integration: ${integration}
    versionTemplate:
      sourceName: ${sourceName}
      versionName: "latest"
      region: ${region}

jobs:
  - name: test_vars
    type: runSh
    steps:
      - IN: temp_img
      - TASK:
          name: test_img
          runtime:
            options:
              env:
                - image_res: "app_img"
          script:
            - *login_image_registry
            - echo $IMAGE_NAME

  - name: test_wh
    type: runSh
    steps:
      - IN: in_repo
      - TASK:
          script:
            - ls
      - OUT: beta_ciRepo
        replicate: in_repo

  - name: beta_runCI
    type: runCI
    steps:
      - IN: box_runCI
      - IN: some_state
        switch: off

  - name: test_key
    type: runSh
    steps:
      - IN: foo_int
      - TASK:
          script:
            - printenv
            - |
                resName=foo_int
                intKey=avi
            - |
                if [ $(shipctl get_integration_resource $resName masterName) == "keyValuePair" ]; then
                  eval echo "$""$intKey"
                else
                  UP=$(get_resource_name "$1")
                  INTKEYNAME=$(sanitize_shippable_string "$(to_uppercase "$2")")
                  eval echo "$""$UP"_INTEGRATION_"$INTKEYNAME"
                fi

  - name: test_rep
    type: runSh
    steps:
      - IN: play_repo
      - TASK:
          runtime:
            options:
              env:
                - AVI: "foo"
          script:
            - pushd $(shipctl get_resource_state "play_repo")
            - shipctl replace sample.txt
            - cat sample.txt
            - FOO="bar with multiple words"
            - echo "FOO=$FOO" >> $JOB_STATE/$JOB_NAME.env
            - ls -al $JOB_STATE
            - shipctl put_resource_state_multi $JOB_NAME "A=this is awsome" "B=no no" "C=plainsimple"
